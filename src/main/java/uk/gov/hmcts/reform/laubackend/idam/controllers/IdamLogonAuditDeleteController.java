package uk.gov.hmcts.reform.laubackend.idam.controllers;

import io.swagger.v3.oas.annotations.Hidden;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import uk.gov.hmcts.reform.laubackend.idam.exceptions.InvalidRequestException;
import uk.gov.hmcts.reform.laubackend.idam.service.LogonLogService;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.http.HttpStatus.NOT_FOUND;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static uk.gov.hmcts.reform.laubackend.idam.utils.InputParamsVerifierHelper.verifyIdNotEmpty;

@Hidden
@RestController
@Slf4j
@RequiredArgsConstructor
@Tag(name = "IdAM logon database delete operation.", description = "This is the Log and Audit "
        + "Back-End API that will delete database records to facilitate removal of the test data,"
        + " generated by functional and e2e tests")
public class IdamLogonAuditDeleteController {

    private final LogonLogService logonLogService;

    @Operation(tags = "DELETE end-point", summary = "Delete IdAM logon id record from the database.",
            description = "This API will delete a record from the lau-idam database for the given IdAM logon id. "
                    + "It is intended to be called from the test api for testing purposes."
    )
    @ApiResponse(responseCode = "200", description = "Logonlog record has been deleted")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden")
    @ApiResponse(responseCode = "404", description = "IdAM logon id not found in the database")
    @ApiResponse(responseCode = "400", description = "Missing IdAM logon id from the API request")
    @ApiResponse(responseCode = "500", description = "Internal Server Error")
    @DeleteMapping(
        path = "/audit/logon/deleteAuditLogonRecord",
        produces = APPLICATION_JSON_VALUE,
        consumes = APPLICATION_JSON_VALUE
    )
    public ResponseEntity<Object> deleteLogonLog(@RequestParam("logonId") final String logonId) {
        try {
            verifyIdNotEmpty(logonId);
            logonLogService.verifyLogonLogExists(logonId);
            logonLogService.deleteLogonLogById(logonId);
            return new ResponseEntity<>(OK);
        } catch (final InvalidRequestException invalidRequestException) {
            return getExceptionResponseEntity(invalidRequestException, BAD_REQUEST);
        } catch (final EmptyResultDataAccessException emptyResultDataAccessException) {
            return getExceptionResponseEntity(emptyResultDataAccessException, NOT_FOUND);
        } catch (final Exception exception) {
            return getExceptionResponseEntity(exception, INTERNAL_SERVER_ERROR);
        }
    }

    private ResponseEntity<Object> getExceptionResponseEntity(final Exception exception, final HttpStatus httpStatus) {
        log.error(
                "deleteLogonLog API call failed due to error - {}",
                exception.getMessage(),
                exception
        );
        return new ResponseEntity<>(httpStatus);
    }
}
